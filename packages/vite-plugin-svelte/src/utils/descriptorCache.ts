//import path from 'path'
//import slash from 'slash'
import hash from 'hash-sum'
import { CompileOptions, Options } from '../index'
import { compileSvelte } from './compileSvelte'

export interface SvelteComponentDescriptor {
  id: string
  js: { code: string; map?: any; dependencies?: any[] }
  css: { code: string; map?: any; dependencies?: any[] }
  warnings: any
  vars: any
  compilerOptions: CompileOptions
  rest: Partial<Options>
  ssr: boolean | undefined
}

const cache = new Map<string, SvelteComponentDescriptor>()
const prevCache = new Map<string, SvelteComponentDescriptor | undefined>()

function normalize(filename: string, root: string) {
  // TODO proper normalization to root
  const id = filename.startsWith(root) ? filename.replace(root, '') : filename
  return id
}
export async function createDescriptor(
  filename: string,
  source: string,
  root: string,
  isProduction: boolean | undefined,
  compilerOptions: CompileOptions,
  rest: Partial<Options>,
  ssr: boolean | undefined
): Promise<SvelteComponentDescriptor> {
  const fileId = normalize(filename, root)
  const compiled = await compileSvelte(
    fileId,
    source,
    compilerOptions,
    rest,
    ssr
  )

  // TODO this id is generated by vite-plugin-vue, may not be needed for svelte but may be handy
  // ensure the path is normalized in a way that is consistent inside
  // project (relative to root) and on different systems.

  const id = hash(fileId + (isProduction ? source : ''))

  const descriptor: SvelteComponentDescriptor = {
    ...compiled,
    rest,
    ssr,
    id
  }

  setDescriptor(filename, root, descriptor)
  return descriptor
}

export function getPrevDescriptor(filename: string, root: string) {
  const id = normalize(filename, root)
  return prevCache.get(id)
}

export function setPrevDescriptor(
  filename: string,
  root: string,
  entry: SvelteComponentDescriptor
) {
  const id = normalize(filename, root)
  prevCache.set(id, entry)
}

export function getDescriptor(
  filename: string,
  root: string,
  errorOnMissing = true
) {
  const id = normalize(filename, root)
  if (cache.has(id)) {
    return cache.get(id)!
  }
  if (errorOnMissing) {
    throw new Error(
      `${filename} has no corresponding entry in the cache. ` +
        `This is a @svitejs/vite-plugin-svelte internal error, please open an issue.`
    )
  }
}

export function setDescriptor(
  filename: string,
  root: string,
  entry: SvelteComponentDescriptor
) {
  const id = normalize(filename, root)
  cache.set(id, entry)
}
